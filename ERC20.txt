// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol
interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract Block is IERC20{

        string public name = "Block";
        string public symbol = "BLK";
        uint public decimal=0;
        uint public override totalSupply; // variable act as getter function for totalSupply function
        address public founder;

        mapping(address=>uint) public balances; // stores balances of owner
        mapping(address=>mapping(address=>uint)) public allowed;

    constructor(){
        totalSupply = 1000;
        founder=msg.sender;
        balances[founder]= totalSupply;
    }

     function balanceOf(address account) external view override returns (uint){
        return balances[account];
     }
     function transfer(address recipient, uint amount) external override returns (bool){
        require(balances[msg.sender]>amount,"You have insufficient balance");
        balances[recipient]+=amount;
        balances[msg.sender]-=amount;

        emit Transfer(msg.sender, recipient, amount);
        return true;
     } 
     
     function allowance(address owner, address spender) external view override returns (uint){
        return allowed[owner][spender];
     }

     function approve(address spender, uint amount) external override returns (bool){
        require(balances[msg.sender]>=amount,"You have insufficeint balance");
        require(amount>0,"zero token, Not approved!");
        allowed[msg.sender][spender]=amount;
        emit Approval(msg.sender, spender, amount);
        return true;

     }
      function transferFrom(address sender, address recipient, uint amount) external override returns (bool){
        require(allowed[sender][recipient]>=amount,"You are not approved for this much of tokens");
        require(balances[sender]>=amount,"You don't have sufficent funds");
        balances[sender]-=amount;
        balances[recipient]+=amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
      }
}
